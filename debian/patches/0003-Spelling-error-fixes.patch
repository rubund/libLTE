From: Ruben Undheim <ruben.undheim@gmail.com>
Date: Fri, 27 Jul 2018 18:16:22 +0000
Subject: Spelling error fixes

---
 srsenb/src/main.cc                    | 2 +-
 srsenb/src/phy/txrx.cc                | 2 +-
 srsenb/src/upper/rrc.cc               | 4 ++--
 srsenb/src/upper/s1ap.cc              | 2 +-
 srsepc/src/main.cc                    | 2 +-
 srsepc/src/mbms-gw/mbms-gw.cc         | 2 +-
 srsepc/src/mme/mme_gtpc.cc            | 2 +-
 srsepc/src/mme/s1ap_ctx_mngmt_proc.cc | 2 +-
 srsepc/src/mme/s1ap_mngmt_proc.cc     | 4 ++--
 srsepc/src/mme/s1ap_nas_transport.cc  | 2 +-
 srsue/src/mac/proc_bsr.cc             | 2 +-
 srsue/src/main.cc                     | 2 +-
 srsue/src/phy/phch_recv.cc            | 2 +-
 13 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/srsenb/src/main.cc b/srsenb/src/main.cc
index 3622f8d..c0815ec 100644
--- a/srsenb/src/main.cc
+++ b/srsenb/src/main.cc
@@ -75,7 +75,7 @@ void parse_args(all_args_t *args, int argc, char* argv[]) {
     ("enb.tac",           bpo::value<string>(&tac)->default_value("0x0"),                          "Tracking Area Code")
     ("enb.mcc",           bpo::value<string>(&mcc)->default_value("001"),                          "Mobile Country Code")
     ("enb.mnc",           bpo::value<string>(&mnc)->default_value("01"),                           "Mobile Network Code")
-    ("enb.mme_addr",      bpo::value<string>(&args->enb.s1ap.mme_addr)->default_value("127.0.0.1"),"IP address of MME for S1 connnection")
+    ("enb.mme_addr",      bpo::value<string>(&args->enb.s1ap.mme_addr)->default_value("127.0.0.1"),"IP address of MME for S1 connection")
     ("enb.gtp_bind_addr", bpo::value<string>(&args->enb.s1ap.gtp_bind_addr)->default_value("192.168.3.1"), "Local IP address to bind for GTP connection")
     ("enb.s1c_bind_addr", bpo::value<string>(&args->enb.s1ap.s1c_bind_addr)->default_value("192.168.3.1"), "Local IP address to bind for S1AP connection")
     ("enb.phy_cell_id",   bpo::value<uint32_t>(&args->enb.pci)->default_value(0),                  "Physical Cell Identity (PCI)")
diff --git a/srsenb/src/phy/txrx.cc b/srsenb/src/phy/txrx.cc
index 7f6503b..d088550 100644
--- a/srsenb/src/phy/txrx.cc
+++ b/srsenb/src/phy/txrx.cc
@@ -125,7 +125,7 @@ void txrx::run_thread()
       srslte_timestamp_copy(&tx_time, &rx_time);
       srslte_timestamp_add(&tx_time, 0, HARQ_DELAY_MS*1e-3);
       
-      Debug("Settting TTI=%d, tx_mutex=%d, tx_time=%ld:%f to worker %d\n", 
+      Debug("Setting TTI=%d, tx_mutex=%d, tx_time=%ld:%f to worker %d\n", 
             tti, tx_mutex_cnt, 
             tx_time.full_secs, tx_time.frac_secs,
             worker->get_id());
diff --git a/srsenb/src/upper/rrc.cc b/srsenb/src/upper/rrc.cc
index 2e481ce..1dc3359 100644
--- a/srsenb/src/upper/rrc.cc
+++ b/srsenb/src/upper/rrc.cc
@@ -550,7 +550,7 @@ void rrc::parse_ul_dcch(uint16_t rnti, uint32_t lcid, byte_buffer_t *pdu)
     if (users.count(rnti)) {
       users[rnti].parse_ul_dcch(lcid, pdu);
     } else {
-      rrc_log->error("Processing %s: Unkown rnti=0x%x\n", rb_id_text[lcid], rnti);
+      rrc_log->error("Processing %s: Unknown rnti=0x%x\n", rb_id_text[lcid], rnti);
     }
   }
 }
@@ -574,7 +574,7 @@ void rrc::process_rl_failure(uint16_t rnti)
       rrc_log->info("%d Radio-Link failure detected rnti=0x%x\n", n_rfl, rnti);
     }
   } else {
-    rrc_log->error("Radio-Link failure detected for uknown rnti=0x%x\n", rnti);
+    rrc_log->error("Radio-Link failure detected for unknown rnti=0x%x\n", rnti);
   }
 }
 
diff --git a/srsenb/src/upper/s1ap.cc b/srsenb/src/upper/s1ap.cc
index 1e2b259..1babe89 100644
--- a/srsenb/src/upper/s1ap.cc
+++ b/srsenb/src/upper/s1ap.cc
@@ -1033,7 +1033,7 @@ std::string s1ap::get_cause(LIBLTE_S1AP_CAUSE_STRUCT *c)
     cause += liblte_s1ap_causemisc_text[c->choice.misc.e];
     break;
   default:
-    cause += "unkown";
+    cause += "unknown";
     break;
   }
   return cause;
diff --git a/srsepc/src/main.cc b/srsepc/src/main.cc
index beed677..29f4659 100644
--- a/srsepc/src/main.cc
+++ b/srsepc/src/main.cc
@@ -106,7 +106,7 @@ parse_args(all_args_t *args, int argc, char* argv[]) {
     ("mme.tac",             bpo::value<string>(&tac)->default_value("0x0"),                          "Tracking Area Code")
     ("mme.mcc",             bpo::value<string>(&mcc)->default_value("001"),                          "Mobile Country Code")
     ("mme.mnc",             bpo::value<string>(&mnc)->default_value("01"),                           "Mobile Network Code")
-    ("mme.mme_bind_addr",   bpo::value<string>(&mme_bind_addr)->default_value("127.0.0.1"),"IP address of MME for S1 connnection")
+    ("mme.mme_bind_addr",   bpo::value<string>(&mme_bind_addr)->default_value("127.0.0.1"),"IP address of MME for S1 connection")
     ("mme.dns_addr",        bpo::value<string>(&dns_addr)->default_value("8.8.8.8"),"IP address of the DNS server for the UEs")
     ("mme.apn",             bpo::value<string>(&mme_apn)->default_value(""),                   "Set Access Point Name (APN) for data services")
     ("hss.db_file",         bpo::value<string>(&hss_db_file)->default_value("ue_db.csv"),".csv file that stores UE's keys")
diff --git a/srsepc/src/mbms-gw/mbms-gw.cc b/srsepc/src/mbms-gw/mbms-gw.cc
index b373df4..e87eed4 100644
--- a/srsepc/src/mbms-gw/mbms-gw.cc
+++ b/srsepc/src/mbms-gw/mbms-gw.cc
@@ -316,7 +316,7 @@ mbms_gw::handle_sgi_md_pdu(srslte::byte_buffer_t *msg)
   int n = sendto(m_m1u, msg->msg, msg->N_bytes, 0,
                  (sockaddr *) &m_m1u_multi_addr, sizeof(struct sockaddr));
   if(n<0){
-    m_mbms_gw_log->console("Error writting to M1-U socket.\n");
+    m_mbms_gw_log->console("Error writing to M1-U socket.\n");
   }
   else{
     m_mbms_gw_log->debug("Sent %d Bytes\n", msg->N_bytes);
diff --git a/srsepc/src/mme/mme_gtpc.cc b/srsepc/src/mme/mme_gtpc.cc
index 6ef0e2c..94ab6f2 100644
--- a/srsepc/src/mme/mme_gtpc.cc
+++ b/srsepc/src/mme/mme_gtpc.cc
@@ -212,7 +212,7 @@ mme_gtpc::handle_create_session_response(srslte::gtpc_pdu *cs_resp_pdu)
   //Check UE Ipv4 address was allocated
   if(cs_resp->paa_present != true)
   {
-    m_mme_gtpc_log->error("PDN Adress Allocation not present\n");
+    m_mme_gtpc_log->error("PDN Address Allocation not present\n");
     return;
   }
   if(cs_resp->paa.pdn_type != srslte::GTPC_PDN_TYPE_IPV4)
diff --git a/srsepc/src/mme/s1ap_ctx_mngmt_proc.cc b/srsepc/src/mme/s1ap_ctx_mngmt_proc.cc
index b9d599d..97453d0 100644
--- a/srsepc/src/mme/s1ap_ctx_mngmt_proc.cc
+++ b/srsepc/src/mme/s1ap_ctx_mngmt_proc.cc
@@ -191,7 +191,7 @@ s1ap_ctx_mngmt_proc::send_initial_context_setup_request(ue_emm_ctx_t *emm_ctx,
 
   struct in_addr addr;
   addr.s_addr = htonl(sgw_s1u_ip);
-  m_s1ap_log->info("Sent Intial Context Setup Request. E-RAB id %d \n",erab_ctx_req->e_RAB_ID.E_RAB_ID);
+  m_s1ap_log->info("Sent Initial Context Setup Request. E-RAB id %d \n",erab_ctx_req->e_RAB_ID.E_RAB_ID);
   m_s1ap_log->info("Initial Context -- S1-U TEID 0x%x. IP %s \n", sgw_s1u_teid,inet_ntoa(addr));
   m_s1ap_log->console("Initial Context Setup Request -- eNB UE S1AP Id %d, MME UE S1AP Id %d\n",in_ctxt_req->eNB_UE_S1AP_ID.ENB_UE_S1AP_ID, in_ctxt_req->MME_UE_S1AP_ID.MME_UE_S1AP_ID);
   m_s1ap_log->console("Initial Context Setup Request -- E-RAB id %d\n",erab_ctx_req->e_RAB_ID.E_RAB_ID);
diff --git a/srsepc/src/mme/s1ap_mngmt_proc.cc b/srsepc/src/mme/s1ap_mngmt_proc.cc
index 079eca1..dbd45cd 100644
--- a/srsepc/src/mme/s1ap_mngmt_proc.cc
+++ b/srsepc/src/mme/s1ap_mngmt_proc.cc
@@ -94,8 +94,8 @@ s1ap_mngmt_proc::handle_s1_setup_request(LIBLTE_S1AP_MESSAGE_S1SETUPREQUEST_STRU
   //Check matching PLMNs
   if(enb_ctx.plmn!=m_s1ap->get_plmn()){
 
-    m_s1ap_log->console("Sending S1 Setup Failure - Unkown PLMN\n");
-    m_s1ap_log->warning("Sending S1 Setup Failure - Unkown PLMN\n");
+    m_s1ap_log->console("Sending S1 Setup Failure - Unknown PLMN\n");
+    m_s1ap_log->warning("Sending S1 Setup Failure - Unknown PLMN\n");
     pack_s1_setup_failure(LIBLTE_S1AP_CAUSEMISC_UNKNOWN_PLMN,reply_buffer);
   }
   else{
diff --git a/srsepc/src/mme/s1ap_nas_transport.cc b/srsepc/src/mme/s1ap_nas_transport.cc
index 1bb871f..661c117 100644
--- a/srsepc/src/mme/s1ap_nas_transport.cc
+++ b/srsepc/src/mme/s1ap_nas_transport.cc
@@ -2083,7 +2083,7 @@ s1ap_nas_transport::log_unhandled_attach_request_ies(const LIBLTE_MME_ATTACH_REQ
   }
   if(attach_req->additional_guti_present)
   {
-    m_s1ap_log->warning("NAS attach request: Aditional GUTI present, but not handled.\n");
+    m_s1ap_log->warning("NAS attach request: Additional GUTI present, but not handled.\n");
   }
   if(attach_req->last_visited_registered_tai_present)
   {
diff --git a/srsue/src/mac/proc_bsr.cc b/srsue/src/mac/proc_bsr.cc
index bd49671..309c1f9 100644
--- a/srsue/src/mac/proc_bsr.cc
+++ b/srsue/src/mac/proc_bsr.cc
@@ -308,7 +308,7 @@ bool bsr_proc::need_to_send_bsr_on_ul_grant(uint32_t grant_size, bsr_t *bsr)
     generate_bsr(bsr, 0);
     bsr_sz = bsr->format==LONG_BSR?3:1;
     if (total_data <= (int)grant_size && total_data + 1 + bsr_sz > grant_size) {
-      Debug("Grant is not enough to accomodate the BSR MAC CE\n");
+      Debug("Grant is not enough to accommodate the BSR MAC CE\n");
     } else {
       Debug("BSR:   Including Regular BSR: grant_size=%d, total_data=%d, bsr_sz=%d\n", 
           grant_size, total_data, bsr_sz);
diff --git a/srsue/src/main.cc b/srsue/src/main.cc
index f71f9ac..ea5b528 100644
--- a/srsue/src/main.cc
+++ b/srsue/src/main.cc
@@ -137,7 +137,7 @@ void parse_args(all_args_t *args, int argc, char *argv[]) {
     ("usim.imei", bpo::value<string>(&args->usim.imei), "USIM IMEI")
     ("usim.k", bpo::value<string>(&args->usim.k), "USIM K")
     ("usim.pin", bpo::value<string>(&args->usim.pin), "PIN in case real SIM card is used")
-    ("usim.reader", bpo::value<string>(&args->usim.reader)->default_value(""), "Force specifiy PCSC reader. Default: Try all available readers.")
+    ("usim.reader", bpo::value<string>(&args->usim.reader)->default_value(""), "Force specify PCSC reader. Default: Try all available readers.")
 
     /* Expert section */
     ("expert.ip_netmask",
diff --git a/srsue/src/phy/phch_recv.cc b/srsue/src/phy/phch_recv.cc
index 9f9ef94..e16ccfd 100644
--- a/srsue/src/phy/phch_recv.cc
+++ b/srsue/src/phy/phch_recv.cc
@@ -1616,7 +1616,7 @@ void phch_recv::intra_measure::write(uint32_t tti, cf_t *data, uint32_t nsamples
     }
     if (receiving == true) {
       if (srslte_ringbuffer_write(&ring_buffer, data, nsamples*sizeof(cf_t)) < (int) (nsamples*sizeof(cf_t))) {
-        Warning("Error writting to ringbuffer\n");
+        Warning("Error writing to ringbuffer\n");
         receiving = false;
       } else {
         receive_cnt++;
